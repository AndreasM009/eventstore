/*
Copyright AndreasM009.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/AndreasM009/eventstore-service-go/pkg/apis/eventstore/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EventstoreLister helps list Eventstores.
type EventstoreLister interface {
	// List lists all Eventstores in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Eventstore, err error)
	// Eventstores returns an object that can list and get Eventstores.
	Eventstores(namespace string) EventstoreNamespaceLister
	EventstoreListerExpansion
}

// eventstoreLister implements the EventstoreLister interface.
type eventstoreLister struct {
	indexer cache.Indexer
}

// NewEventstoreLister returns a new EventstoreLister.
func NewEventstoreLister(indexer cache.Indexer) EventstoreLister {
	return &eventstoreLister{indexer: indexer}
}

// List lists all Eventstores in the indexer.
func (s *eventstoreLister) List(selector labels.Selector) (ret []*v1alpha1.Eventstore, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Eventstore))
	})
	return ret, err
}

// Eventstores returns an object that can list and get Eventstores.
func (s *eventstoreLister) Eventstores(namespace string) EventstoreNamespaceLister {
	return eventstoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EventstoreNamespaceLister helps list and get Eventstores.
type EventstoreNamespaceLister interface {
	// List lists all Eventstores in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Eventstore, err error)
	// Get retrieves the Eventstore from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Eventstore, error)
	EventstoreNamespaceListerExpansion
}

// eventstoreNamespaceLister implements the EventstoreNamespaceLister
// interface.
type eventstoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Eventstores in the indexer for a given namespace.
func (s eventstoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Eventstore, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Eventstore))
	})
	return ret, err
}

// Get retrieves the Eventstore from the indexer for a given namespace and name.
func (s eventstoreNamespaceLister) Get(name string) (*v1alpha1.Eventstore, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("eventstore"), name)
	}
	return obj.(*v1alpha1.Eventstore), nil
}
